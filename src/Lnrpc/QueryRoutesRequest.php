<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: rpc.proto

namespace Lnrpc;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>lnrpc.QueryRoutesRequest</code>
 */
class QueryRoutesRequest extends \Google\Protobuf\Internal\Message
{
    /**
     *&#47; The 33-byte hex-encoded public key for the payment destination
     *
     * Generated from protobuf field <code>string pub_key = 1;</code>
     */
    private $pub_key = '';
    /**
     *&#47; The amount to send expressed in satoshis
     *
     * Generated from protobuf field <code>int64 amt = 2;</code>
     */
    private $amt = 0;
    /**
     *&#47; The max number of routes to return.
     *
     * Generated from protobuf field <code>int32 num_routes = 3;</code>
     */
    private $num_routes = 0;
    /**
     *&#47; An optional CLTV delta from the current height that should be used for the timelock of the final hop
     *
     * Generated from protobuf field <code>int32 final_cltv_delta = 4;</code>
     */
    private $final_cltv_delta = 0;
    /**
     **
     *The maximum number of satoshis that will be paid as a fee of the payment.
     *This value can be represented either as a percentage of the amount being
     *sent, or as a fixed amount of the maximum fee the user is willing the pay to
     *send the payment.
     *
     * Generated from protobuf field <code>.lnrpc.FeeLimit fee_limit = 5;</code>
     */
    private $fee_limit = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $pub_key
     *          &#47; The 33-byte hex-encoded public key for the payment destination
     *     @type int|string $amt
     *          &#47; The amount to send expressed in satoshis
     *     @type int $num_routes
     *          &#47; The max number of routes to return.
     *     @type int $final_cltv_delta
     *          &#47; An optional CLTV delta from the current height that should be used for the timelock of the final hop
     *     @type \Lnrpc\FeeLimit $fee_limit
     *          *
     *          The maximum number of satoshis that will be paid as a fee of the payment.
     *          This value can be represented either as a percentage of the amount being
     *          sent, or as a fixed amount of the maximum fee the user is willing the pay to
     *          send the payment.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Rpc::initOnce();
        parent::__construct($data);
    }

    /**
     *&#47; The 33-byte hex-encoded public key for the payment destination
     *
     * Generated from protobuf field <code>string pub_key = 1;</code>
     * @return string
     */
    public function getPubKey()
    {
        return $this->pub_key;
    }

    /**
     *&#47; The 33-byte hex-encoded public key for the payment destination
     *
     * Generated from protobuf field <code>string pub_key = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setPubKey($var)
    {
        GPBUtil::checkString($var, True);
        $this->pub_key = $var;

        return $this;
    }

    /**
     *&#47; The amount to send expressed in satoshis
     *
     * Generated from protobuf field <code>int64 amt = 2;</code>
     * @return int|string
     */
    public function getAmt()
    {
        return $this->amt;
    }

    /**
     *&#47; The amount to send expressed in satoshis
     *
     * Generated from protobuf field <code>int64 amt = 2;</code>
     * @param int|string $var
     * @return $this
     */
    public function setAmt($var)
    {
        GPBUtil::checkInt64($var);
        $this->amt = $var;

        return $this;
    }

    /**
     *&#47; The max number of routes to return.
     *
     * Generated from protobuf field <code>int32 num_routes = 3;</code>
     * @return int
     */
    public function getNumRoutes()
    {
        return $this->num_routes;
    }

    /**
     *&#47; The max number of routes to return.
     *
     * Generated from protobuf field <code>int32 num_routes = 3;</code>
     * @param int $var
     * @return $this
     */
    public function setNumRoutes($var)
    {
        GPBUtil::checkInt32($var);
        $this->num_routes = $var;

        return $this;
    }

    /**
     *&#47; An optional CLTV delta from the current height that should be used for the timelock of the final hop
     *
     * Generated from protobuf field <code>int32 final_cltv_delta = 4;</code>
     * @return int
     */
    public function getFinalCltvDelta()
    {
        return $this->final_cltv_delta;
    }

    /**
     *&#47; An optional CLTV delta from the current height that should be used for the timelock of the final hop
     *
     * Generated from protobuf field <code>int32 final_cltv_delta = 4;</code>
     * @param int $var
     * @return $this
     */
    public function setFinalCltvDelta($var)
    {
        GPBUtil::checkInt32($var);
        $this->final_cltv_delta = $var;

        return $this;
    }

    /**
     **
     *The maximum number of satoshis that will be paid as a fee of the payment.
     *This value can be represented either as a percentage of the amount being
     *sent, or as a fixed amount of the maximum fee the user is willing the pay to
     *send the payment.
     *
     * Generated from protobuf field <code>.lnrpc.FeeLimit fee_limit = 5;</code>
     * @return \Lnrpc\FeeLimit
     */
    public function getFeeLimit()
    {
        return $this->fee_limit;
    }

    /**
     **
     *The maximum number of satoshis that will be paid as a fee of the payment.
     *This value can be represented either as a percentage of the amount being
     *sent, or as a fixed amount of the maximum fee the user is willing the pay to
     *send the payment.
     *
     * Generated from protobuf field <code>.lnrpc.FeeLimit fee_limit = 5;</code>
     * @param \Lnrpc\FeeLimit $var
     * @return $this
     */
    public function setFeeLimit($var)
    {
        GPBUtil::checkMessage($var, \Lnrpc\FeeLimit::class);
        $this->fee_limit = $var;

        return $this;
    }

}

