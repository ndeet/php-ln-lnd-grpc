<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: rpc.proto

namespace Lnrpc;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>lnrpc.PolicyUpdateRequest</code>
 */
class PolicyUpdateRequest extends \Google\Protobuf\Internal\Message
{
    /**
     *&#47; The base fee charged regardless of the number of milli-satoshis sent.
     *
     * Generated from protobuf field <code>int64 base_fee_msat = 3[json_name = "base_fee_msat"];</code>
     */
    private $base_fee_msat = 0;
    /**
     *&#47; The effective fee rate in milli-satoshis. The precision of this value goes up to 6 decimal places, so 1e-6.
     *
     * Generated from protobuf field <code>double fee_rate = 4[json_name = "fee_rate"];</code>
     */
    private $fee_rate = 0.0;
    /**
     *&#47; The required timelock delta for HTLCs forwarded over the channel.
     *
     * Generated from protobuf field <code>uint32 time_lock_delta = 5[json_name = "time_lock_delta"];</code>
     */
    private $time_lock_delta = 0;
    protected $scope;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type bool $global
     *          &#47; If set, then this update applies to all currently active channels.
     *     @type \Lnrpc\ChannelPoint $chan_point
     *          &#47; If set, this update will target a specific channel.
     *     @type int|string $base_fee_msat
     *          &#47; The base fee charged regardless of the number of milli-satoshis sent.
     *     @type float $fee_rate
     *          &#47; The effective fee rate in milli-satoshis. The precision of this value goes up to 6 decimal places, so 1e-6.
     *     @type int $time_lock_delta
     *          &#47; The required timelock delta for HTLCs forwarded over the channel.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Rpc::initOnce();
        parent::__construct($data);
    }

    /**
     *&#47; If set, then this update applies to all currently active channels.
     *
     * Generated from protobuf field <code>bool global = 1[json_name = "global"];</code>
     * @return bool
     */
    public function getGlobal()
    {
        return $this->readOneof(1);
    }

    /**
     *&#47; If set, then this update applies to all currently active channels.
     *
     * Generated from protobuf field <code>bool global = 1[json_name = "global"];</code>
     * @param bool $var
     * @return $this
     */
    public function setGlobal($var)
    {
        GPBUtil::checkBool($var);
        $this->writeOneof(1, $var);

        return $this;
    }

    /**
     *&#47; If set, this update will target a specific channel.
     *
     * Generated from protobuf field <code>.lnrpc.ChannelPoint chan_point = 2[json_name = "chan_point"];</code>
     * @return \Lnrpc\ChannelPoint
     */
    public function getChanPoint()
    {
        return $this->readOneof(2);
    }

    /**
     *&#47; If set, this update will target a specific channel.
     *
     * Generated from protobuf field <code>.lnrpc.ChannelPoint chan_point = 2[json_name = "chan_point"];</code>
     * @param \Lnrpc\ChannelPoint $var
     * @return $this
     */
    public function setChanPoint($var)
    {
        GPBUtil::checkMessage($var, \Lnrpc\ChannelPoint::class);
        $this->writeOneof(2, $var);

        return $this;
    }

    /**
     *&#47; The base fee charged regardless of the number of milli-satoshis sent.
     *
     * Generated from protobuf field <code>int64 base_fee_msat = 3[json_name = "base_fee_msat"];</code>
     * @return int|string
     */
    public function getBaseFeeMsat()
    {
        return $this->base_fee_msat;
    }

    /**
     *&#47; The base fee charged regardless of the number of milli-satoshis sent.
     *
     * Generated from protobuf field <code>int64 base_fee_msat = 3[json_name = "base_fee_msat"];</code>
     * @param int|string $var
     * @return $this
     */
    public function setBaseFeeMsat($var)
    {
        GPBUtil::checkInt64($var);
        $this->base_fee_msat = $var;

        return $this;
    }

    /**
     *&#47; The effective fee rate in milli-satoshis. The precision of this value goes up to 6 decimal places, so 1e-6.
     *
     * Generated from protobuf field <code>double fee_rate = 4[json_name = "fee_rate"];</code>
     * @return float
     */
    public function getFeeRate()
    {
        return $this->fee_rate;
    }

    /**
     *&#47; The effective fee rate in milli-satoshis. The precision of this value goes up to 6 decimal places, so 1e-6.
     *
     * Generated from protobuf field <code>double fee_rate = 4[json_name = "fee_rate"];</code>
     * @param float $var
     * @return $this
     */
    public function setFeeRate($var)
    {
        GPBUtil::checkDouble($var);
        $this->fee_rate = $var;

        return $this;
    }

    /**
     *&#47; The required timelock delta for HTLCs forwarded over the channel.
     *
     * Generated from protobuf field <code>uint32 time_lock_delta = 5[json_name = "time_lock_delta"];</code>
     * @return int
     */
    public function getTimeLockDelta()
    {
        return $this->time_lock_delta;
    }

    /**
     *&#47; The required timelock delta for HTLCs forwarded over the channel.
     *
     * Generated from protobuf field <code>uint32 time_lock_delta = 5[json_name = "time_lock_delta"];</code>
     * @param int $var
     * @return $this
     */
    public function setTimeLockDelta($var)
    {
        GPBUtil::checkUint32($var);
        $this->time_lock_delta = $var;

        return $this;
    }

    /**
     * @return string
     */
    public function getScope()
    {
        return $this->whichOneof("scope");
    }

}

