<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: rpc.proto

namespace Lnrpc;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>lnrpc.ClosedChannelUpdate</code>
 */
class ClosedChannelUpdate extends \Google\Protobuf\Internal\Message
{
    /**
     **
     *The unique channel ID for the channel. The first 3 bytes are the block
     *height, the next 3 the index within the block, and the last 2 bytes are the
     *output index for the channel.
     *
     * Generated from protobuf field <code>uint64 chan_id = 1;</code>
     */
    private $chan_id = 0;
    /**
     * Generated from protobuf field <code>int64 capacity = 2;</code>
     */
    private $capacity = 0;
    /**
     * Generated from protobuf field <code>uint32 closed_height = 3;</code>
     */
    private $closed_height = 0;
    /**
     * Generated from protobuf field <code>.lnrpc.ChannelPoint chan_point = 4;</code>
     */
    private $chan_point = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int|string $chan_id
     *          *
     *          The unique channel ID for the channel. The first 3 bytes are the block
     *          height, the next 3 the index within the block, and the last 2 bytes are the
     *          output index for the channel.
     *     @type int|string $capacity
     *     @type int $closed_height
     *     @type \Lnrpc\ChannelPoint $chan_point
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Rpc::initOnce();
        parent::__construct($data);
    }

    /**
     **
     *The unique channel ID for the channel. The first 3 bytes are the block
     *height, the next 3 the index within the block, and the last 2 bytes are the
     *output index for the channel.
     *
     * Generated from protobuf field <code>uint64 chan_id = 1;</code>
     * @return int|string
     */
    public function getChanId()
    {
        return $this->chan_id;
    }

    /**
     **
     *The unique channel ID for the channel. The first 3 bytes are the block
     *height, the next 3 the index within the block, and the last 2 bytes are the
     *output index for the channel.
     *
     * Generated from protobuf field <code>uint64 chan_id = 1;</code>
     * @param int|string $var
     * @return $this
     */
    public function setChanId($var)
    {
        GPBUtil::checkUint64($var);
        $this->chan_id = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>int64 capacity = 2;</code>
     * @return int|string
     */
    public function getCapacity()
    {
        return $this->capacity;
    }

    /**
     * Generated from protobuf field <code>int64 capacity = 2;</code>
     * @param int|string $var
     * @return $this
     */
    public function setCapacity($var)
    {
        GPBUtil::checkInt64($var);
        $this->capacity = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>uint32 closed_height = 3;</code>
     * @return int
     */
    public function getClosedHeight()
    {
        return $this->closed_height;
    }

    /**
     * Generated from protobuf field <code>uint32 closed_height = 3;</code>
     * @param int $var
     * @return $this
     */
    public function setClosedHeight($var)
    {
        GPBUtil::checkUint32($var);
        $this->closed_height = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>.lnrpc.ChannelPoint chan_point = 4;</code>
     * @return \Lnrpc\ChannelPoint
     */
    public function getChanPoint()
    {
        return $this->chan_point;
    }

    /**
     * Generated from protobuf field <code>.lnrpc.ChannelPoint chan_point = 4;</code>
     * @param \Lnrpc\ChannelPoint $var
     * @return $this
     */
    public function setChanPoint($var)
    {
        GPBUtil::checkMessage($var, \Lnrpc\ChannelPoint::class);
        $this->chan_point = $var;

        return $this;
    }

}

